#!/bin/bash -e
# setup/update system ready for building appliances

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

[[ -z "$DEBUG" ]] || set -x

GIT_DEPTH=1
APP=${1}
[[ -n "$APP" ]] || APP="core"

distro="$(lsb_release -si | tr '[:upper:]' '[:lower:]')"
[[ "$distro" == "turnkey" ]] && distro="debian"

export RELEASE="${RELEASE:-${distro}/$(lsb_release -s -c)}"
export CODENAME="$(basename $RELEASE)"
export ARCH="${ARCH:-$(dpkg --print-architecture)}"

IMAGES="http://piturnkey.ddns.net/images"
FAB_PATH="/turnkey/fab"
BOOTSTRAP_NAME="bootstrap-${CODENAME}-${ARCH}"
BOOTSTRAP_PATH="$FAB_PATH/bootstraps/${CODENAME}"
BT_PATH="/turnkey/buildtasks"
BT_VERIFY="$BT_PATH/bin/signature-verify"

[[ $(id -u) -eq 0 ]] || fatal "Root user required. Please rerun with sudo."

clone_or_update() {
    src=https://github.com/$1
    dst=$2
    branch=$3
    mkdir -p $(dirname $dst)
    if [[ -d "$dst" ]]; then
        info "$dst exists, attempting update."
        git_dir=$dst/.git
        if [[ -d "$git_dir" ]]; then
            GIT_DIR=$git_dir git pull || warning "Updating $dst failed, skipping."
        else
            warning "$dst exists, but is not a git repo - skipping."
            return
        fi
    else
        info "Cloning $src into $dst."
        git clone -b $branch --depth $GIT_DEPTH $src $dst || warning "Cloning $dst failed, skipping."
    fi
}

clone_or_update heneault/buildtasks $BT_PATH pi_priv
clone_or_update turnkeylinux/tklbam-profiles /turnkey/tklbam-profiles master
clone_or_update heneault/common $FAB_PATH/common pi_priv
clone_or_update turnkeylinux-apps/$APP $FAB_PATH/products/$APP master

if [[ "${ARCH}" == "amd64" ]]; then
  clone_or_update turnkeylinux/cdroots $FAB_PATH/cdroots master
fi

if [[ "${ARCH}" == "amd64" ]]; then
  clone_or_update turnkeylinux/cdroots $FAB_PATH/cdroots master
fi

if [[ -f "$BT_PATH/config/common.cfg" ]]; then
    . $BT_PATH/config/common.cfg
elif [[ -f "$BT_PATH/config.example/common.cfg" ]]; then
    . $BT_PATH/config.example/common.cfg
else
    fatal "$BT_PATH config not found, unable to determine GPG key ID (BT_GPGKEY)."
fi

if [[ -d "$BOOTSTRAP_PATH" ]]; then
    info "$BOOTSTRAP_PATH exists, skipping download."
else
    info "Downloading $BOOTSTRAP_NAME"
    mkdir -p $(dirname $BOOTSTRAP_PATH)
    cd $(dirname $BOOTSTRAP_PATH)
    bootstrap_file=$BOOTSTRAP_PATH
    wget -nc -nv $IMAGES/bootstrap/$BOOTSTRAP_NAME.tar.gz \
        || fatal "Downloading $BOOTSTRAP_NAME failed."
    wget -nc -nv $IMAGES/bootstrap/$BOOTSTRAP_NAME.tar.gz.hash \
        || fatal "Downloading $BOOTSTRAP_NAME hash file failed."

    if [[ -f "$BT_VERIFY" ]]; then
        bootstrap_file=$(dirname $BOOTSTRAP_PATH)/$BOOTSTRAP_NAME.tar.gz
        BT_DEBUG=$DEBUG $BT_VERIFY --force-gpg $bootstrap_file $bootstrap_file.hash
    else
        fatal "$BT_VERIFY script not found, unable to verfiy downloaded files."
    fi
    info "Unpacking $BOOTSTRAP_NAME"
    mkdir $BOOTSTRAP_PATH
    tar -zxf $BOOTSTRAP_NAME.tar.gz -C $BOOTSTRAP_PATH
fi
info "$(basename $0) complete."
